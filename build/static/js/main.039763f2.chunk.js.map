{"version":3,"sources":["LoadingSlide.js","slide.js","App.js","reportWebVitals.js","index.js"],"names":["LoadingSlide","Slide","props","useState","text","setText","spinner","console","log","aud","FormData","append","fetch","method","headers","body","then","response","json","data","className","time","src","vid","width","controls","Loader","App","context","videoSrc","setVideoSrc","file","changeFile","slides","addSlide","canvasRef","useRef","videoRef","progress","setProgress","startingData","changeStart","ffmpeg","createFFmpeg","useEffect","current","getContext","drawImage","height","different","onFileUpload","a","setTimeout","URL","createObjectURL","Blob","type","onDemoClick","sleep","milliseconds","Promise","resolve","onVideoIn","length","FileReader","load","fetchFile","FS","i","secondsToTime","getImageAtTime","imgUrl","same","j","img2Url","compareImages","getVideo","vidUrl","run","split","buffer","audUrl","concat","img","sec","Date","toISOString","substr","output","currentTime","toDataURL","blobURL","img1","img2","threshold","resemble","compareTo","onComplete","rawMisMatchPercentage","time1","time2","color","onLoaderFinished","onChange","e","target","files","onClick","ref","onLoadedMetadata","duration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.039763f2.chunk.js","sourcesContent":["import { React, useState, useEffect } from 'react';\nimport { Placeholder } from 'semantic-ui-react'\n\nfunction LoadingSlide(props) {\n\n  return (\n    <div>\n      <div className=\"slide\">\n\n        <p className=\"timeStamp\"><Placeholder.Line /></p>\n        <Placeholder style={{ width: \"32%\", height: 150 }}>\n          <Placeholder.Image />\n        </Placeholder>\n\n        <p className=\"text\">\n        <Placeholder>\n  <Placeholder.Paragraph>\n    <Placeholder.Line />\n    <Placeholder.Line />\n    <Placeholder.Line />\n    <Placeholder.Line />\n    <Placeholder.Line />\n  </Placeholder.Paragraph>\n  <Placeholder.Paragraph>\n    <Placeholder.Line />\n    <Placeholder.Line />\n    <Placeholder.Line />\n  </Placeholder.Paragraph>\n</Placeholder>`\n        </p>\n      </div>\n    </div>\n  )\n}\n\n//<img width=\"250\" src={props.img} />   <div className=\"divider\"/>\n//<div>{props.time}</div>\n\nexport default LoadingSlide;","import { React, useState, useEffect } from 'react';\nimport { Placeholder, Loader } from 'semantic-ui-react'\n\nfunction Slide(props) {\n\n\n  const [text, setText] = useState(\"\");\n  const [spinner, setSpinner] = useState(\"spinner\")\n  console.log(props.aud)\n\n  const formData = new FormData();\n  formData.append('data', props.aud)\n\n\n\n  fetch('/speechToText', {\n    method: 'post',\n    headers: {'Content-Type': 'application/octet-stream'},\n    body: props.aud\n  })\n    .then(response => response.json())\n    .then(data => setText(data[\"text\"]))\n    //.then(setSpinner(\"hidden\"))\n\n  return (\n    <div>\n      <div className=\"slide\">\n\n        <p className=\"timeStamp\">{props.time}</p>\n        <video src={props.vid} width=\"32%\" controls/>\n        <div className={spinner}><Loader /></div>\n        <p className=\"text\">{text}</p>\n      </div>\n\n\n    </div>\n  )\n}\n\n//<img width=\"250\" src={props.img} />   <div className=\"divider\"/>\n//<div>{props.time}</div>\n\nexport default Slide;","import React, {useState, useRef, useEffect} from 'react'\nimport { Loader } from 'semantic-ui-react'\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport resemble  from 'resemblejs'\nimport './App.css';\n\nimport LoadingBar from 'react-top-loading-bar'\nimport LoadingSlide from './LoadingSlide'\nimport Slide  from './slide'\n\nfunction App() {\n  const [videoSrc, setVideoSrc] = useState();\n  const [file, changeFile] = useState();\n  const [slides, addSlide] = useState([]);\n\n  const canvasRef = useRef(null);\n  const videoRef = useRef(null);\n\n  const [img1, setimg1] = useState();\n  const [img2, setimg2] = useState();\n\n  const [progress, setProgress] = useState(0)\n  const [startingData, changeStart] = useState(\"input\")\n\n  //const [loader, startLoader] = use\n\n  const ffmpeg = createFFmpeg({\n    log: false,\n  });\n\n\n  var context;\n  useEffect(() => {\n    context = canvasRef.current.getContext('2d')\n    context.drawImage(videoRef.current, 0, 0, canvasRef.width, canvasRef.height);\n  })\n\n  const onFileUpload = async () => {\n    if (file) {\n      changeStart(\"inputHidden\")\n\n      setTimeout(() => {\n        changeStart(\"hidden\")\n      }, 1000)\n\n      await setVideoSrc(URL.createObjectURL(new Blob([file], { type: 'video/mp4' })));\n    }\n  }\n\n  const onDemoClick = async () => {\n\n    changeStart(\"inputHidden\")\n    setVideoSrc(\"output.mp4\")\n    setTimeout(() => {\n      changeStart(\"hidden\")\n    }, 1000)\n\n  }\n\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  const onVideoIn = async (length) => {\n    var reader = new FileReader();\n    await ffmpeg.load();\n    ffmpeg.FS('writeFile', \"vid.mp4\", await fetchFile(file)) // Write mp4 file to memory\n    const differenceThresh = 7;\n    var i = 1;\n    while (i < length) {\n      // get frame\n\n      var time = secondsToTime(i)\n      const imgUrl = await getImageAtTime(i);\n      var same = true;\n\n      var j = i + 1;\n      while (same) {\n        setProgress((j / length ) * 100);\n        var nexttime = secondsToTime(j)\n        const img2Url = await getImageAtTime(j)\n\n        // if meets threshold, add split into document\n        if (await compareImages(imgUrl, img2Url, differenceThresh) && (j - i > 30)) { // true is different, false is same // plus size should be mroe than 30 seconds\n          var vidUrl = await getVideo(i, j, \"out.mp4\");\n          await ffmpeg.run(...(\"-i out.mp4 out.wav\").split(\" \"));\n          var audUrl = new Blob([await ffmpeg.FS('readFile', \"out.wav\").buffer], { type: 'audio/mp3'});\n\n          addSlide(slides => slides.concat(<Slide aud={audUrl} vid={vidUrl} key={i} img={imgUrl} time={secondsToTime(i)}/>))\n\n          same = false;\n          i = j + 2;\n        } else {\n          j += 1;\n        }\n      }\n    }\n\n    setProgress(0);\n  }\n\n  const secondsToTime = (sec) => {\n    return new Date((sec) * 1000).toISOString().substr(11, 8)\n  }\n\n\n  const getImageAtTime = async(time, output) => {\n    videoRef.current.currentTime = await time;\n\n    await context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    var blobURL = await canvasRef.current.toDataURL();\n    await sleep(50)\n    return blobURL;\n  }\n\n  var different;\n  const compareImages = async (img1, img2, threshold) => {\n    var diff = await resemble(img1)\n      .compareTo(img2)\n      .onComplete(data => {\n        //console.log((data.rawMisMatchPercentage), typeof(threshold))\n        if (data.rawMisMatchPercentage > threshold) {\n          console.log(data.rawMisMatchPercentage)\n          different = true;\n        } else {\n          different = false;\n        }\n      })\n    //console.log(different)\n    return different;\n  }\n\n  const getVideo = async(time1, time2, output) => {\n    console.log(secondsToTime(time1))\n    await ffmpeg.run(...(`-i vid.mp4 -ss ${secondsToTime(time1)} -to ${secondsToTime(time2)} -c:v copy -c:a copy ${output}`).split(\" \"));\n    const vid = await ffmpeg.FS('readFile', output)\n    return URL.createObjectURL(new Blob([vid.buffer], { type: 'video/mp4' }));\n  }\n\n  const onFileChange = (e: any) => {\n    changeFile(e.target.files[0]);\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"name\">Slides to Article</h1>\n      </div>\n\n      <LoadingBar color=\"#f11946\" progress={progress} onLoaderFinished={() => setProgress(0)}/>\n\n      <div className={startingData}>\n        <p>This tool converts a recording of a lecture into a readable and searchable article. </p>\n        <p>Good lectures to use are voiceovers of slides without much else going on</p><br/>\n        <h2>Upload a file to get started</h2>\n        <input type=\"file\" onChange={onFileChange} />\n        <button onClick={onFileUpload}>\n          Upload!\n        </button>\n        <br/>\n        <br/>\n        <h2>Or try a demo</h2>\n        <div>\n          <button onClick={onDemoClick}>Try a demo!</button>\n        </div>\n\n      </div>\n\n      <video className=\"mainVid\" ref={videoRef} src={videoSrc} width=\"250\" controls\n      onLoadedMetadata={e => {\n        onVideoIn(e.target.duration);\n      }}></video>\n\n      <canvas ref={canvasRef}></canvas>\n      <div className=\"slides\">{slides}</div>\n    </div>\n  );\n\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}