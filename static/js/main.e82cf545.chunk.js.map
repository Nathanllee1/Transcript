{"version":3,"sources":["slide.js","App.js","reportWebVitals.js","index.js"],"names":["Slide","props","className","time","src","vid","width","controls","App","context","useState","videoSrc","setVideoSrc","file","changeFile","setUpload","slides","addSlide","canvasRef","useRef","videoRef","progress","setProgress","startingData","changeStart","ffmpeg","createFFmpeg","log","useEffect","current","getContext","drawImage","height","different","onFileUpload","a","setTimeout","URL","createObjectURL","Blob","type","sleep","milliseconds","Promise","resolve","onVideoIn","length","load","fetchFile","FS","i","secondsToTime","getImageAtTime","imgUrl","same","j","img2Url","compareImages","getVideo","vidUrl","concat","img","sec","Date","toISOString","substr","output","currentTime","toDataURL","blobURL","img1","img2","threshold","resemble","compareTo","onComplete","data","rawMisMatchPercentage","time1","time2","console","run","split","buffer","color","onLoaderFinished","onChange","e","target","files","onClick","ref","onLoadedMetadata","duration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e82cf545.chunk.js","sourcesContent":["import { React } from 'react';\n\nfunction Slide(props) {\n  return (\n    <div>\n      <div className=\"slide\">\n\n        <p className=\"timeStamp\">{props.time}</p>\n        <video src={props.vid} width=\"32%\" controls/>\n\n        <p className=\"text\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sit amet purus gravida quis blandit. Velit aliquet sagittis id consectetur purus ut faucibus pulvinar elementum. Suspendisse faucibus interdum posuere lorem ipsum dolor. Tellus elementum sagittis vitae et leo. Orci ac auctor augue mauris augue neque gravida in. Blandit cursus risus at ultrices mi. Ac tortor vitae purus faucibus ornare suspendisse. Mauris sit amet massa vitae tortor condimentum. Dolor morbi non arcu risus quis. Mi in nulla posuere sollicitudin aliquam ultrices sagittis orci a. Risus sed vulputate odio ut enim blandit volutpat maecenas. Bibendum ut tristique et egestas quis ipsum suspendisse. Eget gravida cum sociis natoque penatibus et magnis. Feugiat vivamus at augue eget arcu. Etiam dignissim diam quis enim. Nunc sed blandit libero volutpat sed cras ornare arcu dui. Pharetra pharetra massa massa ultricies mi. Sit </p>\n      </div>\n    </div>\n  )\n}\n\n//<img width=\"250\" src={props.img} />   <div className=\"divider\"/>\n//<div>{props.time}</div>\n\nexport default Slide;","import React, {useState, useRef, useEffect} from 'react'\n\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport resemble  from 'resemblejs'\nimport './App.css';\n\nimport LoadingBar from 'react-top-loading-bar'\n\nimport Slide  from './slide'\nimport LoadingSlide from './loadingSlide'\n\nfunction App() {\n  const [videoSrc, setVideoSrc] = useState();\n  const [file, changeFile] = useState();\n  const [imgSrc, setImg] = useState();\n  const [imgSrc2, setImg2] = useState();\n  const [fileUploaded, setUpload] = useState(false);\n  const [slides, addSlide] = useState([]);\n\n  const canvasRef = useRef(null);\n  const videoRef = useRef(null);\n\n  const [progress, setProgress] = useState(0)\n  const [startingData, changeStart] = useState(\"input\")\n\n  const ffmpeg = createFFmpeg({\n    log: false,\n  });\n\n\n  var context;\n  useEffect(() => {\n    context = canvasRef.current.getContext('2d')\n    context.drawImage(videoRef.current, 0, 0, canvasRef.width, canvasRef.height);\n  })\n\n\n\n  const onFileUpload = async () => {\n    if (file) {\n      changeStart(\"inputHidden\")\n\n      setTimeout(() => {\n        changeStart(\"hidden\")\n      }, 2000)\n\n      await setVideoSrc(URL.createObjectURL(new Blob([file], { type: 'video/mp4' })));\n      setUpload(true);\n\n\n    }\n  }\n\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  const onVideoIn = async (length) => {\n    await ffmpeg.load();\n    ffmpeg.FS('writeFile', \"vid.mp4\", await fetchFile(file)) // Write mp4 file to memory\n    const differenceThresh = 4;\n\n    var i = 0;\n    while (i < length) {\n      // get frame\n      var time = secondsToTime(i)\n      const imgUrl = await getImageAtTime(i);\n      var same = true;\n\n      var j = i + 1;\n      while (same) {\n        setProgress((j / length ) * 100);\n        var nexttime = secondsToTime(j)\n        const img2Url = await getImageAtTime(j)\n\n        // if meets threshold, add split into document\n        if (await compareImages(imgUrl, img2Url, differenceThresh) && (j - i > 30)) { // true is different, false is same // plus size should be mroe than 30 seconds\n          var vidUrl = await getVideo(i, j, \"out.mp4\")\n          addSlide(slides => slides.concat(<Slide vid={vidUrl} key={i} img={imgUrl} time={secondsToTime(i)}/>))\n\n          same = false;\n          i = j + 2;\n        }\n        j += 1;\n      }\n      i += 1;\n    }\n\n    setProgress(0);\n  }\n\n  const secondsToTime = (sec) => {\n    return new Date((sec) * 1000).toISOString().substr(11, 8)\n  }\n\n\n  const getImageAtTime = async(time, output) => {\n    videoRef.current.currentTime = await time;\n\n    await context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    var blobURL = await canvasRef.current.toDataURL();\n    await sleep(50)\n    return blobURL;\n  }\n\n\n  var different;\n  const compareImages = async (img1, img2, threshold) => {\n    var diff = await resemble(img1)\n      .compareTo(img2)\n      .onComplete(data => {\n        //console.log((data.rawMisMatchPercentage), typeof(threshold))\n        if (data.rawMisMatchPercentage > threshold) {\n          different = true;\n        } else {\n          different = false;\n        }\n      })\n    //console.log(different)\n    return different;\n  }\n\n  const getVideo = async(time1, time2, output) => {\n    console.log(secondsToTime(time1))\n    await ffmpeg.run(...(`-i vid.mp4 -ss ${secondsToTime(time1)} -to ${secondsToTime(time2)} -c:v copy -c:a copy ${output}`).split(\" \"));\n    const vid = await ffmpeg.FS('readFile', output)\n    return URL.createObjectURL(new Blob([vid.buffer], { type: 'video/mp4' }));\n  }\n\n  const onFileChange = (e: any) => {\n    changeFile(e.target.files[0]);\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"name\">Slides to Article</h1>\n      </div>\n\n      <LoadingBar color=\"#f11946\" progress={progress} onLoaderFinished={() => setProgress(0)}/>\n\n      <div className={startingData}>\n        <h1>Upload a file to get started</h1>\n        <input type=\"file\" onChange={onFileChange} />\n        <button onClick={onFileUpload}>\n          Upload!\n        </button>\n      </div>\n\n      <video className=\"mainVid\" ref={videoRef} src={videoSrc} width=\"250\" controls\n      onLoadedMetadata={e => {\n        onVideoIn(e.target.duration);\n      }}></video>\n\n      <canvas ref={canvasRef}></canvas>\n      <div className=\"slides\">{slides}</div>\n    </div>\n  );\n\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}