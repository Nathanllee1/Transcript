{"version":3,"sources":["slide.js","App.js","reportWebVitals.js","index.js"],"names":["Slide","props","useState","text","spawnWorker","onReady","recognizer","Worker","process","onmessage","message","console","log","postMessage","aud","useEffect","audioCtx","AudioContext","FileReader","XMLHttpRequest","fetch","then","resp","arrayBuffer","e","a","decodeAudioData","audBuffer","worker","event","data","id","time","replace","command","callbackId","numStates","start","end","transitions","from","to","word","logp","className","src","vid","width","controls","App","context","videoSrc","setVideoSrc","file","changeFile","setUpload","slides","addSlide","canvasRef","useRef","videoRef","progress","setProgress","startingData","changeStart","ffmpeg","createFFmpeg","current","getContext","drawImage","height","different","onFileUpload","setTimeout","URL","createObjectURL","Blob","type","sleep","milliseconds","Promise","resolve","onVideoIn","length","load","fetchFile","FS","i","secondsToTime","getImageAtTime","imgUrl","same","j","img2Url","compareImages","getVideo","vidUrl","run","split","buffer","audUrl","concat","img","sec","Date","toISOString","substr","output","currentTime","toDataURL","blobURL","img1","img2","threshold","resemble","compareTo","onComplete","rawMisMatchPercentage","time1","time2","color","onLoaderFinished","onChange","target","files","onClick","ref","onLoadedMetadata","duration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25f437c8.chunk.js","sourcesContent":["import { React, useState, useEffect } from 'react';\n\nfunction Slide(props) {\n\n\n  const [text, setText] = useState(\"Lala here's some text that pocketsphinx should've made\");\n\n  console.log(props.aud)\n  function spawnWorker(onReady) {\n    var recognizer = new Worker(process.env.PUBLIC_URL + \"/sphinx/recognizer.js\")\n    var id = 0;\n\n    recognizer.onmessage = (message) => {\n      console.log(\"initialized!\");\n      onReady(recognizer);\n    }\n    recognizer.postMessage({'pocketsphinx.js': process.env.PUBLIC_URL + \"/sphinx/pocketsphinx.js\",\n                            'pocketsphinx.wasm': process.env.PUBLIC_URL + \"/sphinx/pocketsphinx.wasm\"});\n\n  }\n\n  useEffect(()=> {\n    var audioCtx = new AudioContext();\n    var reader = new FileReader();\n    var xhr = new XMLHttpRequest();\n\n    fetch(props.aud)\n      .then(resp => resp.arrayBuffer())\n      .then (async function(e) {\n        console.log(e)\n\n        var audBuffer = await audioCtx.decodeAudioData(e)\n\n        console.log(audBuffer);\n        spawnWorker(function(worker) {\n          worker.onmessage = function(event) {\n            console.log(event.data)\n          }\n          //recognizer.postMessage({command: 'start'});\n          var id = props.time.replace(\":\", \"\")\n          worker.postMessage({command: 'initialize', callbackId: id})\n          var grammar = {numStates: 3,\n               start: 0,\n               end: 2,\n               transitions: [{from: 0, to: 1, word: \"HELLO\"},\n                             {from: 1, to: 2, logp: 0, word: \"WORLD\"},\n                             {from: 1, to: 2}]\n              };\n          worker.postMessage({command: 'addGrammar', data: grammar, callbackId: id});\n\n          var words = [[\"ONE\", \"W AH N\"], [\"TWO\", \"T UW\"], [\"THREE\", \"TH R IY\"]];\n          worker.postMessage({command: 'addWords', data: words, callbackId: id});\n          worker.postMessage({command: 'start', data: id});\n          worker.postMessage({command: 'process', data: audBuffer});\n\n      })\n    })\n\n\n      //var audBuffer = audioCtx.decodeAudioData(arrBuffer)\n\n  })\n\n\n\n  /*\n\n  var Module = {\n    locateFile: function() {return process.env.PUBLIC_URL + \"/sphinx/pocketsphinx.wasm\"},\n    onRunTimeInitialized: function() {\n      console.log('init')\n    }\n  }\n\n\n  var recognizer = new Module.Recognizer();\n\n  var output = recognizer.start();\n  output = recognizer.process(arrBuffer);\n  setText(recognizer.getHyp())\n\n  recognizer.delete();\n\n  */\n\n  return (\n    <div>\n      <div className=\"slide\">\n\n        <p className=\"timeStamp\">{props.time}</p>\n        <video src={props.vid} width=\"32%\" controls/>\n\n        <p className=\"text\">{text}</p>\n      </div>\n    </div>\n  )\n}\n\n//<img width=\"250\" src={props.img} />   <div className=\"divider\"/>\n//<div>{props.time}</div>\n\nexport default Slide;","import React, {useState, useRef, useEffect} from 'react'\n\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport resemble  from 'resemblejs'\nimport './App.css';\n\nimport LoadingBar from 'react-top-loading-bar'\n\nimport Slide  from './slide'\nimport LoadingSlide from './loadingSlide'\n\nfunction App() {\n  const [videoSrc, setVideoSrc] = useState();\n  const [file, changeFile] = useState();\n  const [fileUploaded, setUpload] = useState(false);\n  const [slides, addSlide] = useState([]);\n\n  const canvasRef = useRef(null);\n  const videoRef = useRef(null);\n\n  const [progress, setProgress] = useState(0)\n  const [startingData, changeStart] = useState(\"input\")\n\n  const ffmpeg = createFFmpeg({\n    log: false,\n  });\n\n\n  var context;\n  useEffect(() => {\n    context = canvasRef.current.getContext('2d')\n    context.drawImage(videoRef.current, 0, 0, canvasRef.width, canvasRef.height);\n  })\n\n\n\n  const onFileUpload = async () => {\n    if (file) {\n      changeStart(\"inputHidden\")\n\n      setTimeout(() => {\n        changeStart(\"hidden\")\n      }, 1000)\n\n      await setVideoSrc(URL.createObjectURL(new Blob([file], { type: 'video/mp4' })));\n      setUpload(true);\n\n\n    }\n  }\n\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  const onVideoIn = async (length) => {\n    await ffmpeg.load();\n    ffmpeg.FS('writeFile', \"vid.mp4\", await fetchFile(file)) // Write mp4 file to memory\n    const differenceThresh = 7;\n\n    var i = 300;\n    while (i < length) {\n      // get frame\n      var time = secondsToTime(i)\n      const imgUrl = await getImageAtTime(i);\n      var same = true;\n\n      var j = i + 1;\n      while (same) {\n        setProgress((j / length ) * 100);\n        var nexttime = secondsToTime(j)\n        const img2Url = await getImageAtTime(j)\n\n        // if meets threshold, add split into document\n        if (await compareImages(imgUrl, img2Url, differenceThresh) && (j - i > 30)) { // true is different, false is same // plus size should be mroe than 30 seconds\n          var vidUrl = await getVideo(i, j, \"out.mp4\");\n          await ffmpeg.run(...(\"-i out.mp4 out.mp3\").split(\" \"));\n          var audUrl = URL.createObjectURL(new Blob([await ffmpeg.FS('readFile', \"out.mp3\").buffer], { type: 'audio/mp3'}));\n          addSlide(slides => slides.concat(<Slide aud={audUrl} vid={vidUrl} key={i} img={imgUrl} time={secondsToTime(i)}/>))\n\n          same = false;\n          i = j + 2;\n        } else {\n          j += 1;\n        }\n      }\n    }\n\n    setProgress(0);\n  }\n\n  const secondsToTime = (sec) => {\n    return new Date((sec) * 1000).toISOString().substr(11, 8)\n  }\n\n\n  const getImageAtTime = async(time, output) => {\n    videoRef.current.currentTime = await time;\n\n    await context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    var blobURL = await canvasRef.current.toDataURL();\n    await sleep(50)\n    return blobURL;\n  }\n\n  var different;\n  const compareImages = async (img1, img2, threshold) => {\n    var diff = await resemble(img1)\n      .compareTo(img2)\n      .onComplete(data => {\n        //console.log((data.rawMisMatchPercentage), typeof(threshold))\n        if (data.rawMisMatchPercentage > threshold) {\n          console.log(data.rawMisMatchPercentage)\n          different = true;\n        } else {\n          different = false;\n        }\n      })\n    //console.log(different)\n    return different;\n  }\n\n  const getVideo = async(time1, time2, output) => {\n    console.log(secondsToTime(time1))\n    await ffmpeg.run(...(`-i vid.mp4 -ss ${secondsToTime(time1)} -to ${secondsToTime(time2)} -c:v copy -c:a copy ${output}`).split(\" \"));\n    const vid = await ffmpeg.FS('readFile', output)\n    return URL.createObjectURL(new Blob([vid.buffer], { type: 'video/mp4' }));\n  }\n\n  const onFileChange = (e: any) => {\n    changeFile(e.target.files[0]);\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"name\">Slides to Article</h1>\n      </div>\n\n      <LoadingBar color=\"#f11946\" progress={progress} onLoaderFinished={() => setProgress(0)}/>\n\n      <div className={startingData}>\n        <p>This tool converts a recording of a lecture into a readable and searchable article. </p>\n        <p>Good lectures to use are voiceovers of slides without much else going on</p><br/>\n        <h2>Upload a file to get started</h2>\n        <input type=\"file\" onChange={onFileChange} />\n        <button onClick={onFileUpload}>\n          Upload!\n        </button>\n      </div>\n\n      <video className=\"mainVid\" ref={videoRef} src={videoSrc} width=\"250\" controls\n      onLoadedMetadata={e => {\n        onVideoIn(e.target.duration);\n      }}></video>\n\n      <canvas ref={canvasRef}></canvas>\n      <div className=\"slides\">{slides}</div>\n    </div>\n  );\n\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}