{"version":3,"sources":["slide.js","App.js","reportWebVitals.js","index.js"],"names":["Slide","props","useState","text","setText","console","log","aud","FormData","append","fetch","method","headers","body","then","response","json","data","className","time","src","vid","width","controls","App","context","videoSrc","setVideoSrc","file","changeFile","slides","addSlide","canvasRef","useRef","videoRef","progress","setProgress","startingData","changeStart","ffmpeg","createFFmpeg","useEffect","current","getContext","drawImage","height","different","onFileUpload","a","setTimeout","URL","createObjectURL","Blob","type","sleep","milliseconds","Promise","resolve","onVideoIn","length","FileReader","load","fetchFile","FS","i","secondsToTime","getImageAtTime","imgUrl","same","j","img2Url","compareImages","getVideo","vidUrl","run","split","buffer","audUrl","concat","img","sec","Date","toISOString","substr","output","currentTime","toDataURL","blobURL","img1","img2","threshold","resemble","compareTo","onComplete","rawMisMatchPercentage","time1","time2","color","onLoaderFinished","onChange","e","target","files","onClick","ref","onLoadedMetadata","duration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d3e4c6b.chunk.js","sourcesContent":["import { React, useState, useEffect } from 'react';\n\nfunction Slide(props) {\n\n\n  const [text, setText] = useState(\"\");\n  console.log(props.aud)\n\n  const formData = new FormData();\n  formData.append('data', props.aud)\n\n  fetch('/speechToText', {\n    method: 'post',\n    headers: {'Content-Type': 'application/octet-stream'},\n    body: props.aud\n  })\n    .then(response => response.json())\n    .then(data => setText(data[\"text\"]))\n\n  return (\n    <div>\n      <div className=\"slide\">\n\n        <p className=\"timeStamp\">{props.time}</p>\n        <video src={props.vid} width=\"32%\" controls/>\n\n        <p className=\"text\">{text}</p>\n      </div>\n    </div>\n  )\n}\n\n//<img width=\"250\" src={props.img} />   <div className=\"divider\"/>\n//<div>{props.time}</div>\n\nexport default Slide;","import React, {useState, useRef, useEffect} from 'react'\n\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport resemble  from 'resemblejs'\nimport './App.css';\n\nimport LoadingBar from 'react-top-loading-bar'\n\nimport Slide  from './slide'\nimport LoadingSlide from './loadingSlide'\n\nfunction App() {\n  const [videoSrc, setVideoSrc] = useState();\n  const [file, changeFile] = useState();\n  const [slides, addSlide] = useState([]);\n\n  const canvasRef = useRef(null);\n  const videoRef = useRef(null);\n\n  const [progress, setProgress] = useState(0)\n  const [startingData, changeStart] = useState(\"input\")\n\n  const ffmpeg = createFFmpeg({\n    log: false,\n  });\n\n\n  var context;\n  useEffect(() => {\n    context = canvasRef.current.getContext('2d')\n    context.drawImage(videoRef.current, 0, 0, canvasRef.width, canvasRef.height);\n  })\n\n  const onFileUpload = async () => {\n    if (file) {\n      changeStart(\"inputHidden\")\n\n      setTimeout(() => {\n        changeStart(\"hidden\")\n      }, 1000)\n\n      await setVideoSrc(URL.createObjectURL(new Blob([file], { type: 'video/mp4' })));\n    }\n  }\n\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  const onVideoIn = async (length) => {\n    var reader = new FileReader();\n    await ffmpeg.load();\n    ffmpeg.FS('writeFile', \"vid.mp4\", await fetchFile(file)) // Write mp4 file to memory\n    const differenceThresh = 7;\n\n    var i = 0;\n    while (i < length) {\n      // get frame\n      var time = secondsToTime(i)\n      const imgUrl = await getImageAtTime(i);\n      var same = true;\n\n      var j = i + 1;\n      while (same) {\n        setProgress((j / length ) * 100);\n        var nexttime = secondsToTime(j)\n        const img2Url = await getImageAtTime(j)\n\n        // if meets threshold, add split into document\n        if (await compareImages(imgUrl, img2Url, differenceThresh) && (j - i > 30)) { // true is different, false is same // plus size should be mroe than 30 seconds\n          var vidUrl = await getVideo(i, j, \"out.mp4\");\n          await ffmpeg.run(...(\"-i out.mp4 out.wav\").split(\" \"));\n          var audUrl = new Blob([await ffmpeg.FS('readFile', \"out.wav\").buffer], { type: 'audio/mp3'});\n\n          addSlide(slides => slides.concat(<Slide aud={audUrl} vid={vidUrl} key={i} img={imgUrl} time={secondsToTime(i)}/>))\n\n          same = false;\n          i = j + 2;\n        } else {\n          j += 1;\n        }\n      }\n    }\n\n    setProgress(0);\n  }\n\n  const secondsToTime = (sec) => {\n    return new Date((sec) * 1000).toISOString().substr(11, 8)\n  }\n\n\n  const getImageAtTime = async(time, output) => {\n    videoRef.current.currentTime = await time;\n\n    await context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    var blobURL = await canvasRef.current.toDataURL();\n    await sleep(50)\n    return blobURL;\n  }\n\n  var different;\n  const compareImages = async (img1, img2, threshold) => {\n    var diff = await resemble(img1)\n      .compareTo(img2)\n      .onComplete(data => {\n        //console.log((data.rawMisMatchPercentage), typeof(threshold))\n        if (data.rawMisMatchPercentage > threshold) {\n          console.log(data.rawMisMatchPercentage)\n          different = true;\n        } else {\n          different = false;\n        }\n      })\n    //console.log(different)\n    return different;\n  }\n\n  const getVideo = async(time1, time2, output) => {\n    console.log(secondsToTime(time1))\n    await ffmpeg.run(...(`-i vid.mp4 -ss ${secondsToTime(time1)} -to ${secondsToTime(time2)} -c:v copy -c:a copy ${output}`).split(\" \"));\n    const vid = await ffmpeg.FS('readFile', output)\n    return URL.createObjectURL(new Blob([vid.buffer], { type: 'video/mp4' }));\n  }\n\n  const onFileChange = (e: any) => {\n    changeFile(e.target.files[0]);\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"name\">Slides to Article</h1>\n      </div>\n\n      <LoadingBar color=\"#f11946\" progress={progress} onLoaderFinished={() => setProgress(0)}/>\n\n      <div className={startingData}>\n        <p>This tool converts a recording of a lecture into a readable and searchable article. </p>\n        <p>Good lectures to use are voiceovers of slides without much else going on</p><br/>\n        <h2>Upload a file to get started</h2>\n        <input type=\"file\" onChange={onFileChange} />\n        <button onClick={onFileUpload}>\n          Upload!\n        </button>\n      </div>\n\n      <video className=\"mainVid\" ref={videoRef} src={videoSrc} width=\"250\" controls\n      onLoadedMetadata={e => {\n        onVideoIn(e.target.duration);\n      }}></video>\n\n      <canvas ref={canvasRef}></canvas>\n      <div className=\"slides\">{slides}</div>\n    </div>\n  );\n\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}