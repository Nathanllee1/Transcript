{"version":3,"sources":["slide.js","App.js","reportWebVitals.js","index.js"],"names":["Slide","props","className","src","vid","width","controls","App","different","useState","videoSrc","setVideoSrc","message","setMessage","difference","setDifference","diffCount","incCount","file","changeFile","imgSrc","imgSrc2","slides","addSlide","ffmpeg","createFFmpeg","log","onFileUpload","a","load","fetchFile","FS","data","URL","createObjectURL","Blob","buffer","type","onVideoIn","length","i","primaryImageList","time","secondsToTime","getImageAtTime","imgUrl","push","same","offset","nexttime","img2Url","compareImages","diffImage","imageList","revtime","revUrl","console","getVideo","vidUrl","concat","img","forEach","url","revokeObjectURL","sec","Date","toISOString","substr","output","run","split","getImUrl","image","img1","img2","threshold","resemble","compareTo","onComplete","rawMisMatchPercentage","time1","time2","onLoadedMetadata","e","target","duration","onChange","files","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b094002a.chunk.js","sourcesContent":["import { React } from 'react';\n\nfunction Slide(props) {\n  return (\n    <div>\n      <div className=\"slide\">\n\n\n        <video src={props.vid} width=\"500\" controls/>\n\n        <p className=\"text\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sit amet purus gravida quis blandit. Velit aliquet sagittis id consectetur purus ut faucibus pulvinar elementum. Suspendisse faucibus interdum posuere lorem ipsum dolor. Tellus elementum sagittis vitae et leo. Orci ac auctor augue mauris augue neque gravida in. Blandit cursus risus at ultrices mi. Ac tortor vitae purus faucibus ornare suspendisse. Mauris sit amet massa vitae tortor condimentum. Dolor morbi non arcu risus quis. Mi in nulla posuere sollicitudin aliquam ultrices sagittis orci a. Risus sed vulputate odio ut enim blandit volutpat maecenas. Bibendum ut tristique et egestas quis ipsum suspendisse. Eget gravida cum sociis natoque penatibus et magnis. Feugiat vivamus at augue eget arcu. Etiam dignissim diam quis enim. Nunc sed blandit libero volutpat sed cras ornare arcu dui. Pharetra pharetra massa massa ultricies mi. Sit </p>\n\n      </div>\n\n      <div className=\"divider\"/>\n    </div>\n\n\n\n\n  )\n}\n\n//<img width=\"250\" src={props.img} />\n//<div>{props.time}</div>\n\nexport default Slide;","import React, {useState, useRef} from 'react'\n\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport resemble  from 'resemblejs'\nimport './App.css';\n\nimport Slide  from './slide'\n\n\nfunction App() {\n  const [videoSrc, setVideoSrc] = useState();\n  const [message, setMessage] = useState('Upload');\n  const [difference, setDifference] = useState();\n  const [diffCount, incCount] = useState(0);\n  const [file, changeFile] = useState();\n  const [imgSrc, setImg] = useState();\n  const [imgSrc2, setImg2] = useState();\n\n  const [slides, addSlide] = useState([]);\n\n  const ffmpeg = createFFmpeg({\n    log: false,\n  });\n\n  const onFileUpload = async () => {\n    setMessage('Loading ffmpeg-core.js');\n    await ffmpeg.load();\n    setMessage('Start transcoding');\n\n    if (file) {\n      ffmpeg.FS('writeFile', \"vid.mp4\", await fetchFile(file))\n      const data = ffmpeg.FS('readFile', 'vid.mp4');\n      await setVideoSrc(URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' })));\n    }\n  }\n\n  const onVideoIn = async (length) => {\n    await ffmpeg.load();\n    ffmpeg.FS('writeFile', \"vid.mp4\", await fetchFile(file)) // Write mp4 file to memory\n    // Constants:\n    const frameSkip = 50;\n    const differenceThresh = 4;\n\n    var i = 0;\n    while (i < length) {\n      var primaryImageList = []\n      // get frame\n      var time = secondsToTime(i)\n\n      const imgUrl = await getImageAtTime(time, \"myimage.jpg\");\n      //setImg(imgUrl);\n      primaryImageList.push(imgUrl);\n\n      var same = true;\n      var offset = i + frameSkip;\n\n      while (same) {\n        // get next frame\n        var nexttime = secondsToTime(offset)\n\n        const img2Url = await getImageAtTime(nexttime, \"myimage2.jpg\")\n        //setImg2(img2Url);\n\n        // if meets threshold, add split into document\n        if (await compareImages(imgUrl, img2Url, differenceThresh)) { // true is different, false is same\n\n          setDifference(\"Found new slide!\")\n\n          var diffImage = true;\n          var imageList = [];\n          while (diffImage) { // Go backwards until the image changes (should be the start)\n            offset -= 5;\n            var revtime = secondsToTime(offset)\n            const revUrl = await getImageAtTime(revtime, \"rev.jpg\")\n            imageList.push(revUrl);\n            console.log(offset);\n            if (! (await compareImages(revUrl, imgUrl, differenceThresh))) { // If they're the same image\n              offset += 5\n\n              var vidUrl = await getVideo(i, offset, \"out.mp4\")\n              console.log(i, offset)\n\n              addSlide(slides => slides.concat(<Slide vid={vidUrl} key={i} img={imgUrl} time={secondsToTime(offset)}/>))\n              incCount(diffCount => diffCount + 1);\n              i = offset + 1\n\n              imageList.forEach(url =>{ URL.revokeObjectURL(url); console.log(url)});\n              primaryImageList.forEach(url =>{ URL.revokeObjectURL(url); console.log(url)});\n\n              same = false;\n              diffImage = false;\n            }\n          }\n        }\n        offset += frameSkip;\n      }\n\n      //setMessage(`time: ${time}`)\n      i += frameSkip;\n      setMessage(i + \" \" + frameSkip)\n    }\n  }\n\n  const secondsToTime = (sec) => {\n    return new Date((sec) * 1000).toISOString().substr(11, 8)\n  }\n\n  const getImageAtTime = async(time, output) => {\n    await ffmpeg.run(...(`-ss ${time} -i vid.mp4 -vframes 2 -q:v 2 ${output}`).split(\" \"))\n    return getImUrl(output);\n  }\n\n  const getImUrl = async(image) => {\n    const img = await ffmpeg.FS('readFile', image)\n    return URL.createObjectURL(new Blob([img.buffer], { type: 'image/jpeg' }));\n  }\n\n  var different;\n  const compareImages = async (img1, img2, threshold) => {\n\n    var diff = await resemble(img1)\n      .compareTo(img2)\n      .onComplete(data => {\n        //console.log((data.rawMisMatchPercentage), typeof(threshold))\n        if (data.rawMisMatchPercentage > threshold) {\n          different = true;\n        } else {\n          different = false;\n        }\n      })\n    //console.log(different)\n    return different;\n  }\n\n  const getVideo = async(time1, time2, output) => {\n    console.log(secondsToTime(time1))\n    await ffmpeg.run(...(`-i vid.mp4 -ss ${secondsToTime(time1)} -to ${secondsToTime(time2)} -c:v copy -c:a copy ${output}`).split(\" \"));\n    const vid = await ffmpeg.FS('readFile', output)\n    return URL.createObjectURL(new Blob([vid.buffer], { type: 'video/mp4' }));\n  }\n\n  const onFileChange = (e: any) => {\n    changeFile(e.target.files[0]);\n  }\n\n  return (\n    <div className=\"App\">\n      <p/>\n\n      <video src={videoSrc} width=\"250\" controls\n      onLoadedMetadata={e => {\n        onVideoIn(e.target.duration);\n      }}></video><br/>\n\n      <img width=\"250\" src={imgSrc}></img>\n      <img width=\"250\" src={imgSrc2}></img>\n\n      <p>Measured Difference: {difference}</p>\n      <p>Number of slides: {diffCount}</p>\n      <p>{message}</p>\n\n      <input type=\"file\" onChange={onFileChange} />\n      <button onClick={onFileUpload}>\n        Upload!\n      </button>\n\n      <div className=\"slides\">{slides}</div>\n\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}